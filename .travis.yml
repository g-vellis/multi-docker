language: generic

# sudo is required
sudo: required

# we define docker as a dependency
services:
   # regarding services, we specify that we want a copy of Docker.
   - docker

before_install:
   # we tag the Image with my Docker id, i.e. gvellis, and give it a name, i.e. react-test .
   # we also need to override the default Dockerfile, by providing not only its name but also its relative location to the .travis.yml file.
   # Note: we use the development Dockerfile as it is that which provides for running the necessary tests.
   - docker build -t gvellis/react-test -f ./client/Dockerfile.dev ./client
   #- docker build -t gvellis/myotherprojecthavingtests -f ./myotherproject/Dockerfile.dev ./myotherproject

# if any of the scripts we write here exists with status code other than 0, then Travis CI is
# going to assume that our test failed.
script:
   # npm tests overrides the deault Container run command
   - docker run -e CI=true gvellis/react-test npm test -- --coverage
   # - docker run -e CI=true gvellis/myotherproject runmytests

# So, after we run every script defined under the script section and after all tests pass successfully,
# then, we  go to the  after_success step.
# Here we will:
#   - build the production version of all of our projects, and then
#   - push them off to the Docker hub.
after_success:
   #  Let's first begin by doing the production version of each of our different sub-projects in here.
   # So, we need to do a docker build for the client, nginx, server and worker folders.
   # we do not use the -f file, as we want the default Dockerfile to be used (i.e. Dockerfile - not e.g. the Dockerfile.dev).
   - docker build -t gvellis/multi-client ./client
   - docker build -t gvellis/multi-nginx ./nginx
   - docker build -t gvellis/multi-server ./server
   - docker build -t gvellis/multi-worker ./worker

   # So, after we build the production version of the Images, we then have to push them all off to Docker Hub

   # In order to push an image to Docker Hub, we need to first log in to the Docker CLI.
   # Long ago, we execute: "docker login" which associated our Docker client right here with our Docker account.
   # And so, if you and I pushed any Images up to Docker Hub, they would be automatically associated with your account or my account.
   # So, we need to make sure that we do the exact same thing inside our Traveston YAML script, before we can attempt to push those off to Docker hub.

   # Login to the Docker CLI
   #       Environment variable we defined interactivelly in Travis
   #       |                                     Environment variable we defined interactivelly in Travis
   #       |                                     |
   - echo "$DOCKER_PASSWORD"  | docker login -u "$DOCKER_ID" --password-stdin
     # Essentially this is how we log into Docker in one single command.


     # Take those Images and push them to Docker Hub.
   - docker push gvellis/multi-client
   - docker push gvellis/multi-nginx
   - docker push gvellis/multi-server
   - docker push gvellis/multi-worker

deploy:
   provider: elasticbeanstalk
   region: us-east-2
   app: multi-docker
   env: MultiDocker-env
   bucket_name: elasticbeanstalk-us-east-2-736749029387
   bucket_path: docker-multi
   on:
      branch: master
   access_key_id: $AWS_ACCESS_KEY
   secret_access_key: $AWS_SECRET_KEY
